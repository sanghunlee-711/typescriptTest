{"version":3,"sources":["components/Confirm.tsx","components/Done.tsx","components/Request.tsx","Main.tsx","reportWebVitals.ts","index.tsx"],"names":["Confirm","props","className","undefined","newBuyData","length","receiveData","onClick","checkAll","checkBoolean","src","map","el","index","active","checking","isUsed","name","douzoneCode","unitPrice","created","slice","indexOf","disabled","type","value","serial","serialActive","alt","receiveProduct","happenError","error","buydata","Done","Reqeust","placeholder","site","sitePartition","colSpan","align","Main","useState","setBuydata","setSite","setSitePartition","setError","setNewBuyData","setCheckBoolean","countBool","setCountBool","setReceiveData","api","url","setDataType","fetch","then","response","ok","Error","statusText","json","res","data","itemData","newData","i","quantity","sampleEl","JSON","parse","stringify","showSerial","push","makeItemList","useEffect","Request","order","checkedData","forEach","receivedData","receivedArray","newshowData","testArr","concat","newOneArray","errorData","errorArray","alert","window","location","reload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b717d23b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/confirm.scss\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n  serial?: number;\n  serialActive?: string;\n  showSerial?: string;\n}\ninterface ErrorType {\n  [index: number]: { serial?: string };\n}\ntype ErrorTypes = Array<ErrorType>;\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Confirm(props: {\n  buydata: [];\n  error: ErrorTypes;\n  newBuyData: EnumServiceItems | null | undefined;\n  receiveData: EnumServiceItems | null | undefined;\n\n  checking: (\n    order: number,\n    checkedData: EnumServiceItems | null | undefined\n  ) => void;\n  checkAll: (checkedData: EnumServiceItems | null | undefined) => void;\n  checkBoolean: string;\n  receiveProduct: (receivedData: EnumServiceItems | null | undefined) => void;\n  happenError: (\n    errorData: ErrorTypes,\n    checkedData: EnumServiceItems | null | undefined\n  ) => void;\n}) {\n  return (\n    <div className=\"Confirm\">\n      <section className=\"Confirm\">\n        <div className=\"requestContainer\">\n          <h2>구매 대상 확인</h2>\n          <div className=\"requestCount\">\n            <span>\n              전체\n              {props.newBuyData?.length === undefined\n                ? 0\n                : props.newBuyData?.length +\n                  (props.receiveData?.length === undefined\n                    ? 0\n                    : props.receiveData?.length)}\n              /\n            </span>\n            <span>대기 {props.newBuyData?.length} /</span>\n            <span>\n              완료\n              {props.receiveData?.length === 0 || undefined\n                ? 0\n                : props.receiveData?.length}\n            </span>\n          </div>\n\n          <table>\n            <tr>\n              <th onClick={() => props.checkAll(props.newBuyData)}>\n                {props.checkBoolean === \"false\" ? (\n                  <img src=\"https://img.icons8.com/ios/15/000000/checked-checkbox--v1.png\" />\n                ) : (\n                  <img src=\"https://img.icons8.com/ios/15/000000/unchecked-checkbox.png\" />\n                )}\n              </th>\n              <th>품목이름</th>\n              <th>품목코드</th>\n              <th>구매단가(VAT포함)</th>\n              <th>구매입고일</th>\n              <th>상태</th>\n              <th>시리얼</th>\n            </tr>\n\n            {props?.newBuyData?.map((el: EnumServiceItem, index) => {\n              return (\n                <tr\n                  key={index}\n                  className={el.active === \"true\" ? \"marking\" : \"\"}\n                >\n                  <td onClick={() => props.checking(index, props.newBuyData)}>\n                    {el.active === \"false\" ? (\n                      <img src=\"https://img.icons8.com/ios/15/000000/unchecked-checkbox.png\" />\n                    ) : (\n                      <img src=\"https://img.icons8.com/ios/15/000000/checked-checkbox--v1.png\" />\n                    )}\n                  </td>\n                  <td>\n                    {el.isUsed ? (\n                      <span className=\"newOne\">[신품]</span>\n                    ) : (\n                      <span className=\"oldOne\">[중고]</span>\n                    )}\n                    <span>{el.name}</span>\n                  </td>\n                  <td>\n                    <span>{el.douzoneCode}</span>\n                  </td>\n                  <td>\n                    <span>{el.unitPrice}</span>\n                  </td>\n                  <td>\n                    <span className=\"createdDate\">\n                      {el.created.slice(0, el.created.indexOf(\"T\"))}\n                    </span>\n                  </td>\n                  <td className=\"pending\">\n                    <span> 대기</span>\n                  </td>\n                  <td>\n                    <input\n                      disabled\n                      type=\"text\"\n                      value={el.active === \"true\" ? `시리얼${el.serial}` : \"\"}\n                    />\n\n                    {el.serialActive === \"true\" ? (\n                      <span className=\"serialErrorMent\">\n                        시리얼이 중복되었습니다.\n                      </span>\n                    ) : (\n                      <span></span>\n                    )}\n                  </td>\n                </tr>\n              );\n            })}\n          </table>\n          {props?.newBuyData?.length === 0 ? (\n            <div className=\"noData\">\n              <img\n                alt=\"nodata image\"\n                src=\"https://icon-library.com/images/no-data-icon/no-data-icon-10.jpg\"\n              />\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </section>\n      <section className=\"buttonWrapper\">\n        <button\n          className={\n            props.newBuyData?.length === 0 ? \"endButton\" : \"activeButton\"\n          }\n          type=\"submit\"\n          onClick={() => props.receiveProduct(props.newBuyData)}\n        >\n          입고하기\n        </button>\n        <button\n          type=\"submit\"\n          className={\n            props.newBuyData?.length === 0 ? \"endButton\" : \"activeButton\"\n          }\n          onClick={() => props.happenError(props.error, props.buydata)}\n        >\n          오류발생시키기\n        </button>\n      </section>\n    </div>\n  );\n}\n\nexport default Confirm;\n","import React from \"react\";\nimport \"../styles/done.scss\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n  serial?: number;\n}\n\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Done(props: { receiveData: EnumServiceItems | null | undefined }) {\n  return (\n    <div className=\"Done\">\n      <section className=\"Confirm\">\n        <div className=\"requestContainer\">\n          <h2>구매완료</h2>\n\n          <table>\n            <th></th>\n            <th>품목이름</th>\n            <th>품목코드</th>\n            <th>구매단가(VAT포함)</th>\n            <th>구매입고일</th>\n            <th>상태</th>\n            <th>시리얼</th>\n            <th>이력</th>\n\n            {props?.receiveData?.map((el: EnumServiceItem, index) => {\n              return (\n                <tr key={index}>\n                  <td>\n                    {el.active === \"false\" ? (\n                      <img src=\"https://img.icons8.com/ios/15/000000/unchecked-checkbox.png\" />\n                    ) : (\n                      <div>\n                        <img src=\"https://img.icons8.com/ios/15/000000/checked-checkbox--v1.png\" />\n                      </div>\n                    )}\n                  </td>\n                  <td>\n                    {el.isUsed ? (\n                      <span className=\"newOne\">[신품]</span>\n                    ) : (\n                      <span className=\"oldOne\">[중고]</span>\n                    )}\n                    <span>{el.name}</span>\n                  </td>\n                  <td>\n                    <span>{el.douzoneCode}</span>\n                  </td>\n                  <td>\n                    <span>{el.unitPrice}</span>\n                  </td>\n                  <td>\n                    <span className=\"createdDate\">\n                      {el.created.slice(0, el.created.indexOf(\"T\"))}\n                    </span>\n                  </td>\n                  <td className=\"pending\">\n                    <span className=\"green\">완료</span>\n                  </td>\n                  <td>\n                    <input\n                      disabled\n                      className=\"serialBlock\"\n                      type=\"text\"\n                      value={el.active === \"true\" ? `시리얼${el.serial}` : \"\"}\n                    />\n                  </td>\n                  <td>:</td>\n                </tr>\n              );\n            })}\n          </table>\n          {props?.receiveData?.length === 0 ? (\n            <div className=\"noData\">\n              <img\n                alt=\"nodata image\"\n                src=\"https://icon-library.com/images/no-data-icon/no-data-icon-10.jpg\"\n              />\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n        <div className=\"buttonWrapper\">\n          <button\n            type=\"submit\"\n            className={\n              props.receiveData?.length === 0 ? \"endButton\" : \"activeButton\"\n            }\n          >\n            되돌리기\n          </button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Done;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport React from \"react\";\nimport \"../styles/request.scss\";\n\nfunction Reqeust(props: { site: []; sitePartition: [] }) {\n  return (\n    <section className=\"Reqeust\">\n      <div className=\"requestContainer\">\n        <h2>구매요청</h2>\n        <table>\n          <th>기본정보</th>\n          <tr>\n            <td>\n              <span>*</span>구매요청자\n            </td>\n            <td className=\"inputArea\">\n              <input\n                disabled\n                className=\"buyRequire\"\n                type=\"text\"\n                placeholder=\"이상훈\"\n              />\n            </td>\n            <td>\n              <span>*</span>지사\n            </td>\n            <td className=\"inputArea\">\n              <select className=\"site\" name=\"site\">\n                {props.site.map(function (el) {\n                  type dataType = {\n                    id: number;\n                    name: string;\n                  };\n                  return (\n                    <option\n                      key={el[\"id\" as keyof dataType]}\n                      value={el[\"id\" as keyof dataType]}\n                    >\n                      {el[\"name\" as keyof dataType]}\n                    </option>\n                  );\n                })}\n              </select>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <span>*</span>창고\n            </td>\n            <td className=\"inputArea\">\n              <select className=\"sitePartition\" name=\"sitePartition\">\n                {props.sitePartition.map(function (el) {\n                  type dataType = {\n                    id: number;\n                    name: string;\n                  };\n                  return (\n                    <option\n                      key={el[\"id\" as keyof dataType]}\n                      value={el[\"id\" as keyof dataType]}\n                    >\n                      {el[\"name\" as keyof dataType]}\n                    </option>\n                  );\n                })}\n              </select>\n            </td>\n            <td>\n              <span>*</span>구매희망일\n            </td>\n            <td>\n              <input type=\"text\" />\n            </td>\n          </tr>\n          <tr className=\"memo\">\n            <td>메모</td>\n            <td colSpan=\"3\" align=\"center\" className=\"inputArea\">\n              <textarea></textarea>\n            </td>\n          </tr>\n        </table>\n      </div>\n    </section>\n  );\n}\n\nexport default Reqeust;\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"./Main.scss\";\nimport Confirm from \"./components/Confirm\";\nimport Done from \"./components/Done\";\nimport Request from \"./components/Request\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n  serial?: number;\n  serialActive?: string;\n  showSerial?: string;\n}\n\ninterface ErrorType {\n  [index: number]: { serial?: string };\n}\ntype ErrorTypes = Array<ErrorType>;\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Main() {\n  const [buydata, setBuydata] = useState<[]>([]);\n  const [site, setSite] = useState<[]>([]);\n  const [sitePartition, setSitePartition] = useState<[]>([]);\n  const [error, setError] = useState<ErrorTypes>([]);\n  const [newBuyData, setNewBuyData] = useState<\n    EnumServiceItems | null | undefined\n  >(null);\n  const [checkBoolean, setCheckBoolean] = useState<string>(\"true\");\n  const [countBool, setCountBool] = useState<number>(0);\n  const [receiveData, setReceiveData] = useState<\n    EnumServiceItems | null | undefined\n  >([]);\n\n  //getData function\n  function api(url: string, setDataType: string) {\n    return fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then((res) => {\n        if (setDataType === \"buydata\") {\n          setBuydata(res.data);\n          makeItemList(res.data);\n        } else if (setDataType === \"site\") {\n          setSite(res);\n        } else if (setDataType === \"sitePartition\") {\n          setSitePartition(res);\n        } else if (setDataType === \"error\") {\n          setError(res.data);\n        } else {\n          return;\n        }\n      });\n  }\n  useEffect(() => {\n    const buydataUrl =\n      \"https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/data.json\";\n\n    const siteUrl =\n      \"https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/site.json\";\n\n    const sitePartitionUrl =\n      \" https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/sitePartition.json\";\n\n    const errorUrl =\n      \"https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/error.json\";\n\n    api(buydataUrl, \"buydata\");\n    api(siteUrl, \"site\");\n    api(sitePartitionUrl, \"sitePartition\");\n    api(errorUrl, \"error\");\n  }, []);\n\n  function happenError(\n    errorData: ErrorTypes,\n    checkedData: EnumServiceItems | null | undefined\n  ): void {\n    const errorArray: EnumServiceItems | null = [];\n\n    if (receiveData?.length != undefined && receiveData?.length >= 1) {\n      alert(\"완료분을 제거 후 다시 발생시켜주세요 [새로고침이 실행 됩니다]\");\n\n      return window.location.reload();\n    }\n    checkedData?.map((el, index) => {\n      let i = 0;\n      while (i < el.quantity) {\n        const sampleEl: EnumServiceItem = JSON.parse(JSON.stringify(el)); //deep copy\n        const sampleError: string | undefined = errorData[index + 1][i].serial;\n        if (sampleError !== undefined) {\n          //error\n          sampleEl.serial = sampleEl.quantity + 1;\n          sampleEl.active = \"true\";\n          sampleEl.serialActive = \"true\";\n          sampleEl.showSerial = \"true\";\n          errorArray.push(sampleEl);\n        } else {\n          //not error\n          sampleEl.serial = i + 1;\n          sampleEl.active = \"true\";\n          sampleEl.serialActive = \"false\";\n          sampleEl.showSerial = \"false\";\n\n          errorArray.push(sampleEl);\n        }\n        i += 1;\n      }\n    });\n    setNewBuyData(errorArray);\n  }\n\n  function makeItemList(itemData: EnumServiceItems | null): void {\n    const newData: EnumServiceItems | null = [];\n\n    itemData?.map((el) => {\n      let i = 0;\n\n      while (i < el.quantity) {\n        const sampleEl: EnumServiceItem = JSON.parse(JSON.stringify(el)); //deep copy\n\n        sampleEl.active = \"false\";\n        sampleEl.serialActive = \"false\";\n        sampleEl.showSerial = \"false\";\n\n        sampleEl.serial = i + 1;\n        newData.push(sampleEl);\n        i += 1;\n      }\n    });\n    setNewBuyData(newData);\n  }\n\n  //checkFucntion\n  function checking(\n    order: number,\n    checkedData: EnumServiceItems | null | undefined\n  ): void {\n    checkedData?.forEach((el, index) => {\n      if (el.active === \"true\" && index === order) {\n        //uncheck\n        setNewBuyData(\n          checkedData?.map((el, index) =>\n            index === order && el.active === \"true\"\n              ? {\n                  ...el,\n                  active: \"false\",\n                  serialActive: \"false\",\n                  showSerial: \"false\",\n                }\n              : el\n          )\n        );\n        setCountBool(countBool - 1);\n        setCheckBoolean(checkedData?.length <= countBool ? \"false\" : \"true\");\n      } else if (el.active === \"false\" && index === order) {\n        //recheck\n        setNewBuyData(\n          checkedData?.map((el, index) =>\n            index === order && el.active === \"false\"\n              ? {\n                  ...el,\n                  active: \"true\",\n                  serialActive: \"false\",\n                  showSerial: \"false\",\n                }\n              : el\n          )\n        );\n        setCountBool(countBool + 1);\n        setCheckBoolean(checkedData?.length <= countBool ? \"false\" : \"true\");\n      }\n    });\n  }\n\n  //checkAll function\n  function checkAll(checkedData: EnumServiceItems | null | undefined): void {\n    setCheckBoolean(checkBoolean === \"true\" ? \"false\" : \"true\");\n\n    setNewBuyData(\n      checkedData?.map((el) =>\n        checkBoolean === \"true\"\n          ? {\n              ...el,\n              active: \"true\",\n              serialActive: \"false\",\n              showSerial: \"false\",\n            }\n          : {\n              ...el,\n              active: \"false\",\n              serialActive: \"false\",\n              showSerial: \"false\",\n            }\n      )\n    );\n  }\n  //receive function\n  function receiveProduct(\n    receivedData: EnumServiceItems | null | undefined\n  ): void {\n    const receivedArray: EnumServiceItems | null | undefined = [];\n    const newshowData: EnumServiceItems | null | undefined = [];\n\n    receivedData?.forEach((el) => {\n      const testArr: EnumServiceItem | null | undefined = JSON.parse(\n        JSON.stringify(el)\n      );\n      if (testArr?.active === \"true\" && testArr?.showSerial === \"false\") {\n        receivedArray.push(testArr);\n      }\n      //구매완료 투입\n      setReceiveData(receiveData?.concat(receivedArray));\n    });\n\n    receivedData?.forEach((el) => {\n      const newOneArray: EnumServiceItem | null | undefined = JSON.parse(\n        JSON.stringify(el)\n      );\n      if (\n        newOneArray?.active === \"false\" ||\n        newOneArray?.showSerial === \"true\"\n      ) {\n        newshowData.push(newOneArray);\n      }\n      //구매절차 데이터\n      setNewBuyData(newshowData);\n    });\n  }\n\n  return (\n    <div className=\"Main\">\n      <Request site={site} sitePartition={sitePartition} />\n      <Confirm\n        buydata={buydata}\n        error={error}\n        newBuyData={newBuyData}\n        checking={checking}\n        checkAll={checkAll}\n        checkBoolean={checkBoolean}\n        receiveProduct={receiveProduct}\n        receiveData={receiveData}\n        happenError={happenError}\n      />\n      <Done receiveData={receiveData} />\n    </div>\n  );\n}\n\nexport default Main;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport Main from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}