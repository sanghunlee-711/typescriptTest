[{"/Users/cloudlee/Desktop/development/tpaytest/src/index.tsx":"1","/Users/cloudlee/Desktop/development/tpaytest/src/reportWebVitals.ts":"2","/Users/cloudlee/Desktop/development/tpaytest/src/Main.tsx":"3","/Users/cloudlee/Desktop/development/tpaytest/src/components/Confirm.tsx":"4","/Users/cloudlee/Desktop/development/tpaytest/src/components/Request.tsx":"5","/Users/cloudlee/Desktop/development/tpaytest/src/components/Done.tsx":"6"},{"size":292,"mtime":1609247622631,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1609247622631,"results":"9","hashOfConfig":"8"},{"size":5996,"mtime":1609340386959,"results":"10","hashOfConfig":"8"},{"size":3796,"mtime":1609340819011,"results":"11","hashOfConfig":"8"},{"size":2344,"mtime":1609335187042,"results":"12","hashOfConfig":"8"},{"size":2442,"mtime":1609339580852,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"cxjhqr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/cloudlee/Desktop/development/tpaytest/src/index.tsx",[],[],"/Users/cloudlee/Desktop/development/tpaytest/src/reportWebVitals.ts",["30"],"import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/cloudlee/Desktop/development/tpaytest/src/Main.tsx",["31","32","33","34","35","36","37","38"],"/Users/cloudlee/Desktop/development/tpaytest/src/components/Confirm.tsx",["39"],"/Users/cloudlee/Desktop/development/tpaytest/src/components/Request.tsx",["40","41","42"],"import React from \"react\";\nimport \"../styles/request.scss\";\nimport { useEffect, useState } from \"react\";\n\nfunction Reqeust(props: { site: []; sitePartition: [] }) {\n  return (\n    <section className=\"Reqeust\">\n      <div className=\"requestContainer\">\n        <h2>구매요청</h2>\n        <table>\n          <th>기본정보</th>\n          <tr>\n            <td>\n              <span>*</span>구매요청자\n            </td>\n            <td className=\"inputArea\">\n              <input type=\"text\" />\n            </td>\n            <td>\n              <span>*</span>지사\n            </td>\n            <td className=\"inputArea\">\n              <select name=\"site\">\n                {props.site.map(function (el) {\n                  type dataType = {\n                    id: number;\n                    name: string;\n                  };\n                  return (\n                    <option\n                      key={el[\"id\" as keyof dataType]}\n                      value={el[\"id\" as keyof dataType]}\n                    >\n                      {el[\"name\" as keyof dataType]}\n                    </option>\n                  );\n                })}\n              </select>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <span>*</span>창고\n            </td>\n            <td className=\"inputArea\">\n              <select name=\"sitePartition\">\n                {props.sitePartition.map(function (el) {\n                  type dataType = {\n                    id: number;\n                    name: string;\n                  };\n                  return (\n                    <option\n                      key={el[\"id\" as keyof dataType]}\n                      value={el[\"id\" as keyof dataType]}\n                    >\n                      {el[\"name\" as keyof dataType]}\n                    </option>\n                  );\n                })}\n              </select>\n            </td>\n            <td>\n              <span>*</span>구매희망일\n            </td>\n            <td>\n              <input type=\"text\" />\n            </td>\n          </tr>\n          <tr className=\"memo\">\n            <td>메모</td>\n            <td colSpan=\"3\" align=\"center\" className=\"inputArea\">\n              <textarea></textarea>\n            </td>\n          </tr>\n        </table>\n      </div>\n    </section>\n  );\n}\n\nexport default Reqeust;\n","/Users/cloudlee/Desktop/development/tpaytest/src/components/Done.tsx",["43","44","45"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n}\n\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Done(props: { receiveData: EnumServiceItems | null | undefined }) {\n  return (\n    <div className=\"Done\">\n      <section className=\"Confirm\">\n        <div className=\"requestContainer\">\n          <h2>구매완료</h2>\n\n          <table>\n            <th>\n              <input type=\"checkbox\" />\n            </th>\n            <th>품목이름</th>\n            <th>품목코드</th>\n            <th>구매단가(VAT포함)</th>\n            <th>구매입고일</th>\n            <th>상태</th>\n            <th>시리얼</th>\n            <th>이력</th>\n\n            {props?.receiveData?.map((el: EnumServiceItem, index) => {\n              return (\n                <tr key={index}>\n                  <td>\n                    {el.active === \"false\" ? (\n                      <div>notCheck</div>\n                    ) : (\n                      <div>Check</div>\n                    )}\n                  </td>\n                  <td>\n                    {el.isUsed ? (\n                      <span className=\"newOne\">[신품]</span>\n                    ) : (\n                      <span className=\"oldOne\">[중고]</span>\n                    )}\n                    <span>{el.name}</span>\n                  </td>\n                  <td>\n                    <span>{el.douzoneCode}</span>\n                  </td>\n                  <td>\n                    <span>{el.unitPrice}</span>\n                  </td>\n                  <td>\n                    <span>{el.unitPrice}</span>\n                  </td>\n                  <td className=\"pending\">\n                    <span>완료</span>\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={el.active === \"true\" ? `시리얼${el.id}` : \"\"}\n                    />\n                  </td>\n                  <td>:</td>\n                </tr>\n              );\n            })}\n          </table>\n        </div>\n        <div className=\"buttonWrapper\">\n          <button type=\"submit\">되돌리기</button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Done;\n",{"ruleId":"46","severity":1,"message":"47","line":3,"column":25,"nodeType":"48","messageId":"49","endLine":3,"endColumn":57},{"ruleId":"46","severity":1,"message":"47","line":23,"column":1,"nodeType":"50","messageId":"49","endLine":23,"endColumn":16},{"ruleId":"51","severity":1,"message":"52","line":36,"column":10,"nodeType":"53","messageId":"54","endLine":36,"endColumn":20},{"ruleId":"51","severity":1,"message":"55","line":36,"column":22,"nodeType":"53","messageId":"54","endLine":36,"endColumn":35},{"ruleId":"51","severity":1,"message":"56","line":82,"column":12,"nodeType":"53","messageId":"54","endLine":82,"endColumn":26},{"ruleId":"51","severity":1,"message":"57","line":88,"column":12,"nodeType":"53","messageId":"54","endLine":88,"endColumn":23},{"ruleId":"51","severity":1,"message":"58","line":90,"column":5,"nodeType":"53","messageId":"54","endLine":90,"endColumn":53},{"ruleId":"51","severity":1,"message":"59","line":171,"column":12,"nodeType":"53","messageId":"54","endLine":171,"endColumn":25},{"ruleId":"51","severity":1,"message":"60","line":171,"column":26,"nodeType":"53","messageId":"54","endLine":171,"endColumn":37},{"ruleId":"46","severity":1,"message":"47","line":19,"column":1,"nodeType":"50","messageId":"49","endLine":32,"endColumn":3},{"ruleId":"51","severity":1,"message":"61","line":3,"column":10,"nodeType":"53","messageId":"54","endLine":3,"endColumn":19},{"ruleId":"51","severity":1,"message":"62","line":3,"column":21,"nodeType":"53","messageId":"54","endLine":3,"endColumn":29},{"ruleId":"46","severity":1,"message":"47","line":5,"column":1,"nodeType":"50","messageId":"49","endLine":5,"endColumn":57},{"ruleId":"51","severity":1,"message":"61","line":2,"column":10,"nodeType":"53","messageId":"54","endLine":2,"endColumn":19},{"ruleId":"51","severity":1,"message":"62","line":2,"column":21,"nodeType":"53","messageId":"54","endLine":2,"endColumn":29},{"ruleId":"46","severity":1,"message":"47","line":19,"column":1,"nodeType":"50","messageId":"49","endLine":19,"endColumn":75},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","@typescript-eslint/no-unused-vars","'errorIndex' is assigned a value but never used.","Identifier","unusedVar","'setErrorIndex' is assigned a value but never used.","'makeErrorIndex' is defined but never used.","'happenError' is defined but never used.","'checkedData' is defined but never used.","'checkFunction' is defined but never used.","'num' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used."]