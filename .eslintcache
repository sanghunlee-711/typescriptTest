[{"/Users/cloudlee/Desktop/development/tpaytest/src/index.tsx":"1","/Users/cloudlee/Desktop/development/tpaytest/src/reportWebVitals.ts":"2","/Users/cloudlee/Desktop/development/tpaytest/src/Main.tsx":"3","/Users/cloudlee/Desktop/development/tpaytest/src/components/Confirm.tsx":"4","/Users/cloudlee/Desktop/development/tpaytest/src/components/Request.tsx":"5","/Users/cloudlee/Desktop/development/tpaytest/src/components/Done.tsx":"6"},{"size":292,"mtime":1609247622631,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1609247622631,"results":"9","hashOfConfig":"8"},{"size":7474,"mtime":1609407070035,"results":"10","hashOfConfig":"8"},{"size":5493,"mtime":1609409545844,"results":"11","hashOfConfig":"8"},{"size":2521,"mtime":1609408710484,"results":"12","hashOfConfig":"8"},{"size":3232,"mtime":1609409450213,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"cxjhqr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"16"},"/Users/cloudlee/Desktop/development/tpaytest/src/index.tsx",[],[],"/Users/cloudlee/Desktop/development/tpaytest/src/reportWebVitals.ts",["32"],"import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/cloudlee/Desktop/development/tpaytest/src/Main.tsx",["33"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"./Main.scss\";\nimport Confirm from \"./components/Confirm\";\nimport Done from \"./components/Done\";\nimport Request from \"./components/Request\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n  serial?: number;\n  serialActive?: string;\n  showSerial?: string;\n}\n\ninterface ErrorType {\n  [index: number]: { serial?: string };\n}\ntype ErrorTypes = Array<ErrorType>;\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Main() {\n  const [buydata, setBuydata] = useState<[]>([]);\n  const [site, setSite] = useState<[]>([]);\n  const [sitePartition, setSitePartition] = useState<[]>([]);\n  const [error, setError] = useState<ErrorTypes>([]);\n  const [newBuyData, setNewBuyData] = useState<\n    EnumServiceItems | null | undefined\n  >(null);\n  const [checkBoolean, setCheckBoolean] = useState<string>(\"true\");\n  const [countBool, setCountBool] = useState<number>(0);\n  const [receiveData, setReceiveData] = useState<\n    EnumServiceItems | null | undefined\n  >([]);\n\n  //getData function\n  function api(url: string, setDataType: string) {\n    return fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then((res) => {\n        if (setDataType === \"buydata\") {\n          setBuydata(res.data);\n          makeItemList(res.data);\n        } else if (setDataType === \"site\") {\n          setSite(res);\n        } else if (setDataType === \"sitePartition\") {\n          setSitePartition(res);\n        } else if (setDataType === \"error\") {\n          setError(res.data);\n        } else {\n          return;\n        }\n      });\n  }\n  useEffect(() => {\n    const buydataUrl =\n      \"https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/data.json\";\n\n    const siteUrl =\n      \"https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/site.json\";\n\n    const sitePartitionUrl =\n      \" https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/sitePartition.json\";\n\n    const errorUrl =\n      \"https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/error.json\";\n\n    api(buydataUrl, \"buydata\");\n    api(siteUrl, \"site\");\n    api(sitePartitionUrl, \"sitePartition\");\n    api(errorUrl, \"error\");\n  }, []);\n\n  function happenError(\n    errorData: ErrorTypes,\n    checkedData: EnumServiceItems | null | undefined\n  ): void {\n    const errorArray: EnumServiceItems | null = [];\n\n    if (receiveData?.length != undefined && receiveData?.length >= 1) {\n      alert(\"완료분을 제거 후 다시 발생시켜주세요 [새로고침이 실행 됩니다]\");\n\n      return window.location.reload();\n    }\n    checkedData?.map((el, index) => {\n      let i = 0;\n      while (i < el.quantity) {\n        const sampleEl: EnumServiceItem = JSON.parse(JSON.stringify(el)); //deep copy\n        const sampleError: string | undefined = errorData[index + 1][i].serial;\n        if (sampleError !== undefined) {\n          //error\n          sampleEl.serial = sampleEl.quantity + 1;\n          sampleEl.active = \"true\";\n          sampleEl.serialActive = \"true\";\n          sampleEl.showSerial = \"true\";\n          errorArray.push(sampleEl);\n        } else {\n          //not error\n          sampleEl.serial = i + 1;\n          sampleEl.active = \"true\";\n          sampleEl.serialActive = \"false\";\n          sampleEl.showSerial = \"false\";\n\n          errorArray.push(sampleEl);\n        }\n        i += 1;\n      }\n    });\n    setNewBuyData(errorArray);\n  }\n\n  function makeItemList(itemData: EnumServiceItems | null): void {\n    const newData: EnumServiceItems | null = [];\n\n    itemData?.map((el) => {\n      let i = 0;\n\n      while (i < el.quantity) {\n        const sampleEl: EnumServiceItem = JSON.parse(JSON.stringify(el)); //deep copy\n\n        sampleEl.active = \"false\";\n        sampleEl.serialActive = \"false\";\n        sampleEl.showSerial = \"false\";\n\n        sampleEl.serial = i + 1;\n        newData.push(sampleEl);\n        i += 1;\n      }\n    });\n    setNewBuyData(newData);\n  }\n\n  //checkFucntion\n  function checking(\n    order: number,\n    checkedData: EnumServiceItems | null | undefined\n  ): void {\n    checkedData?.forEach((el, index) => {\n      if (el.active === \"true\" && index === order) {\n        //uncheck\n        setNewBuyData(\n          checkedData?.map((el, index) =>\n            index === order && el.active === \"true\"\n              ? {\n                  ...el,\n                  active: \"false\",\n                  serialActive: \"false\",\n                  showSerial: \"false\",\n                }\n              : el\n          )\n        );\n        setCountBool(countBool - 1);\n        setCheckBoolean(checkedData?.length <= countBool ? \"false\" : \"true\");\n      } else if (el.active === \"false\" && index === order) {\n        //recheck\n        setNewBuyData(\n          checkedData?.map((el, index) =>\n            index === order && el.active === \"false\"\n              ? {\n                  ...el,\n                  active: \"true\",\n                  serialActive: \"false\",\n                  showSerial: \"false\",\n                }\n              : el\n          )\n        );\n        setCountBool(countBool + 1);\n        setCheckBoolean(checkedData?.length <= countBool ? \"false\" : \"true\");\n      }\n    });\n  }\n\n  //checkAll function\n  function checkAll(checkedData: EnumServiceItems | null | undefined): void {\n    setCheckBoolean(checkBoolean === \"true\" ? \"false\" : \"true\");\n\n    setNewBuyData(\n      checkedData?.map((el) =>\n        checkBoolean === \"true\"\n          ? {\n              ...el,\n              active: \"true\",\n              serialActive: \"false\",\n              showSerial: \"false\",\n            }\n          : {\n              ...el,\n              active: \"false\",\n              serialActive: \"false\",\n              showSerial: \"false\",\n            }\n      )\n    );\n  }\n  //receive function\n  function receiveProduct(\n    receivedData: EnumServiceItems | null | undefined\n  ): void {\n    const receivedArray: EnumServiceItems | null | undefined = [];\n    const newshowData: EnumServiceItems | null | undefined = [];\n\n    receivedData?.forEach((el) => {\n      const testArr: EnumServiceItem | null | undefined = JSON.parse(\n        JSON.stringify(el)\n      );\n      if (testArr?.active === \"true\" && testArr?.showSerial === \"false\") {\n        receivedArray.push(testArr);\n      }\n      //구매완료 투입\n      setReceiveData(receiveData?.concat(receivedArray));\n    });\n\n    receivedData?.forEach((el) => {\n      const newOneArray: EnumServiceItem | null | undefined = JSON.parse(\n        JSON.stringify(el)\n      );\n      if (\n        newOneArray?.active === \"false\" ||\n        newOneArray?.showSerial === \"true\"\n      ) {\n        newshowData.push(newOneArray);\n      }\n      //구매절차 데이터\n      setNewBuyData(newshowData);\n    });\n  }\n\n  return (\n    <div className=\"Main\">\n      <Request site={site} sitePartition={sitePartition} />\n      <Confirm\n        buydata={buydata}\n        error={error}\n        newBuyData={newBuyData}\n        checking={checking}\n        checkAll={checkAll}\n        checkBoolean={checkBoolean}\n        receiveProduct={receiveProduct}\n        receiveData={receiveData}\n        happenError={happenError}\n      />\n      <Done receiveData={receiveData} />\n    </div>\n  );\n}\n\nexport default Main;\n","/Users/cloudlee/Desktop/development/tpaytest/src/components/Confirm.tsx",["34"],"import React from \"react\";\nimport \"../styles/confirm.scss\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n  serial?: number;\n  serialActive?: string;\n  showSerial?: string;\n}\ninterface ErrorType {\n  [index: number]: { serial?: string };\n}\ntype ErrorTypes = Array<ErrorType>;\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Confirm(props: {\n  buydata: [];\n  error: ErrorTypes;\n  newBuyData: EnumServiceItems | null | undefined;\n  receiveData: EnumServiceItems | null | undefined;\n\n  checking: (\n    order: number,\n    checkedData: EnumServiceItems | null | undefined\n  ) => void;\n  checkAll: (checkedData: EnumServiceItems | null | undefined) => void;\n  checkBoolean: string;\n  receiveProduct: (receivedData: EnumServiceItems | null | undefined) => void;\n  happenError: (\n    errorData: ErrorTypes,\n    checkedData: EnumServiceItems | null | undefined\n  ) => void;\n}) {\n  return (\n    <div className=\"Confirm\">\n      <section className=\"Confirm\">\n        <div className=\"requestContainer\">\n          <h2>구매 대상 확인</h2>\n          <div className=\"requestCount\">\n            <span>\n              전체\n              {props.newBuyData?.length === undefined\n                ? 0\n                : props.newBuyData?.length +\n                  (props.receiveData?.length === undefined\n                    ? 0\n                    : props.receiveData?.length)}\n              /\n            </span>\n            <span>대기 {props.newBuyData?.length} /</span>\n            <span>\n              완료\n              {props.receiveData?.length === 0 || undefined\n                ? 0\n                : props.receiveData?.length}\n            </span>\n          </div>\n\n          <table>\n            <tr>\n              <th onClick={() => props.checkAll(props.newBuyData)}>\n                {props.checkBoolean === \"false\" ? (\n                  <img src=\"https://img.icons8.com/ios/15/000000/checked-checkbox--v1.png\" />\n                ) : (\n                  <img src=\"https://img.icons8.com/ios/15/000000/unchecked-checkbox.png\" />\n                )}\n              </th>\n              <th>품목이름</th>\n              <th>품목코드</th>\n              <th>구매단가(VAT포함)</th>\n              <th>구매입고일</th>\n              <th>상태</th>\n              <th>시리얼</th>\n            </tr>\n\n            {props?.newBuyData?.map((el: EnumServiceItem, index) => {\n              return (\n                <tr\n                  key={index}\n                  className={el.active === \"true\" ? \"marking\" : \"\"}\n                >\n                  <td onClick={() => props.checking(index, props.newBuyData)}>\n                    {el.active === \"false\" ? (\n                      <img src=\"https://img.icons8.com/ios/15/000000/unchecked-checkbox.png\" />\n                    ) : (\n                      <img src=\"https://img.icons8.com/ios/15/000000/checked-checkbox--v1.png\" />\n                    )}\n                  </td>\n                  <td>\n                    {el.isUsed ? (\n                      <span className=\"newOne\">[신품]</span>\n                    ) : (\n                      <span className=\"oldOne\">[중고]</span>\n                    )}\n                    <span>{el.name}</span>\n                  </td>\n                  <td>\n                    <span>{el.douzoneCode}</span>\n                  </td>\n                  <td>\n                    <span>{el.unitPrice}</span>\n                  </td>\n                  <td>\n                    <span className=\"createdDate\">\n                      {el.created.slice(0, el.created.indexOf(\"T\"))}\n                    </span>\n                  </td>\n                  <td className=\"pending\">\n                    <span> 대기</span>\n                  </td>\n                  <td>\n                    <input\n                      disabled\n                      type=\"text\"\n                      value={el.active === \"true\" ? `시리얼${el.serial}` : \"\"}\n                    />\n\n                    {el.serialActive === \"true\" ? (\n                      <span className=\"serialErrorMent\">\n                        시리얼이 중복되었습니다.\n                      </span>\n                    ) : (\n                      <span></span>\n                    )}\n                  </td>\n                </tr>\n              );\n            })}\n          </table>\n          {props?.newBuyData?.length === 0 ? (\n            <div className=\"noData\">\n              <img\n                alt=\"nodata image\"\n                src=\"https://icon-library.com/images/no-data-icon/no-data-icon-10.jpg\"\n              />\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </section>\n      <section className=\"buttonWrapper\">\n        <button\n          className={\n            props.newBuyData?.length === 0 ? \"endButton\" : \"activeButton\"\n          }\n          type=\"submit\"\n          onClick={() => props.receiveProduct(props.newBuyData)}\n        >\n          입고하기\n        </button>\n        <button\n          type=\"submit\"\n          className={\n            props.newBuyData?.length === 0 ? \"endButton\" : \"activeButton\"\n          }\n          onClick={() => props.happenError(props.error, props.buydata)}\n        >\n          오류발생시키기\n        </button>\n      </section>\n    </div>\n  );\n}\n\nexport default Confirm;\n","/Users/cloudlee/Desktop/development/tpaytest/src/components/Request.tsx",["35","36","37"],"import React from \"react\";\nimport \"../styles/request.scss\";\nimport { useEffect, useState } from \"react\";\n\nfunction Reqeust(props: { site: []; sitePartition: [] }) {\n  return (\n    <section className=\"Reqeust\">\n      <div className=\"requestContainer\">\n        <h2>구매요청</h2>\n        <table>\n          <th>기본정보</th>\n          <tr>\n            <td>\n              <span>*</span>구매요청자\n            </td>\n            <td className=\"inputArea\">\n              <input\n                disabled\n                className=\"buyRequire\"\n                type=\"text\"\n                placeholder=\"이상훈\"\n              />\n            </td>\n            <td>\n              <span>*</span>지사\n            </td>\n            <td className=\"inputArea\">\n              <select className=\"site\" name=\"site\">\n                {props.site.map(function (el) {\n                  type dataType = {\n                    id: number;\n                    name: string;\n                  };\n                  return (\n                    <option\n                      key={el[\"id\" as keyof dataType]}\n                      value={el[\"id\" as keyof dataType]}\n                    >\n                      {el[\"name\" as keyof dataType]}\n                    </option>\n                  );\n                })}\n              </select>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <span>*</span>창고\n            </td>\n            <td className=\"inputArea\">\n              <select className=\"sitePartition\" name=\"sitePartition\">\n                {props.sitePartition.map(function (el) {\n                  type dataType = {\n                    id: number;\n                    name: string;\n                  };\n                  return (\n                    <option\n                      key={el[\"id\" as keyof dataType]}\n                      value={el[\"id\" as keyof dataType]}\n                    >\n                      {el[\"name\" as keyof dataType]}\n                    </option>\n                  );\n                })}\n              </select>\n            </td>\n            <td>\n              <span>*</span>구매희망일\n            </td>\n            <td>\n              <input type=\"text\" />\n            </td>\n          </tr>\n          <tr className=\"memo\">\n            <td>메모</td>\n            <td colSpan=\"3\" align=\"center\" className=\"inputArea\">\n              <textarea></textarea>\n            </td>\n          </tr>\n        </table>\n      </div>\n    </section>\n  );\n}\n\nexport default Reqeust;\n","/Users/cloudlee/Desktop/development/tpaytest/src/components/Done.tsx",["38"],"import React from \"react\";\nimport \"../styles/done.scss\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n  serial?: number;\n}\n\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Done(props: { receiveData: EnumServiceItems | null | undefined }) {\n  return (\n    <div className=\"Done\">\n      <section className=\"Confirm\">\n        <div className=\"requestContainer\">\n          <h2>구매완료</h2>\n\n          <table>\n            <th></th>\n            <th>품목이름</th>\n            <th>품목코드</th>\n            <th>구매단가(VAT포함)</th>\n            <th>구매입고일</th>\n            <th>상태</th>\n            <th>시리얼</th>\n            <th>이력</th>\n\n            {props?.receiveData?.map((el: EnumServiceItem, index) => {\n              return (\n                <tr key={index}>\n                  <td>\n                    {el.active === \"false\" ? (\n                      <img src=\"https://img.icons8.com/ios/15/000000/unchecked-checkbox.png\" />\n                    ) : (\n                      <div>\n                        <img src=\"https://img.icons8.com/ios/15/000000/checked-checkbox--v1.png\" />\n                      </div>\n                    )}\n                  </td>\n                  <td>\n                    {el.isUsed ? (\n                      <span className=\"newOne\">[신품]</span>\n                    ) : (\n                      <span className=\"oldOne\">[중고]</span>\n                    )}\n                    <span>{el.name}</span>\n                  </td>\n                  <td>\n                    <span>{el.douzoneCode}</span>\n                  </td>\n                  <td>\n                    <span>{el.unitPrice}</span>\n                  </td>\n                  <td>\n                    <span className=\"createdDate\">\n                      {el.created.slice(0, el.created.indexOf(\"T\"))}\n                    </span>\n                  </td>\n                  <td className=\"pending\">\n                    <span className=\"green\">완료</span>\n                  </td>\n                  <td>\n                    <input\n                      disabled\n                      className=\"serialBlock\"\n                      type=\"text\"\n                      value={el.active === \"true\" ? `시리얼${el.serial}` : \"\"}\n                    />\n                  </td>\n                  <td>:</td>\n                </tr>\n              );\n            })}\n          </table>\n          {props?.receiveData?.length === 0 ? (\n            <div className=\"noData\">\n              <img\n                alt=\"nodata image\"\n                src=\"https://icon-library.com/images/no-data-icon/no-data-icon-10.jpg\"\n              />\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n        <div className=\"buttonWrapper\">\n          <button\n            type=\"submit\"\n            className={\n              props.receiveData?.length === 0 ? \"endButton\" : \"activeButton\"\n            }\n          >\n            되돌리기\n          </button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Done;\n",{"ruleId":"39","severity":1,"message":"40","line":3,"column":25,"nodeType":"41","messageId":"42","endLine":3,"endColumn":57},{"ruleId":"39","severity":1,"message":"40","line":30,"column":1,"nodeType":"43","messageId":"42","endLine":30,"endColumn":16},{"ruleId":"39","severity":1,"message":"40","line":25,"column":1,"nodeType":"43","messageId":"42","endLine":42,"endColumn":3},{"ruleId":"44","severity":1,"message":"45","line":3,"column":10,"nodeType":"46","messageId":"47","endLine":3,"endColumn":19},{"ruleId":"44","severity":1,"message":"48","line":3,"column":21,"nodeType":"46","messageId":"47","endLine":3,"endColumn":29},{"ruleId":"39","severity":1,"message":"40","line":5,"column":1,"nodeType":"43","messageId":"42","endLine":5,"endColumn":57},{"ruleId":"39","severity":1,"message":"40","line":20,"column":1,"nodeType":"43","messageId":"42","endLine":20,"endColumn":75},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used."]