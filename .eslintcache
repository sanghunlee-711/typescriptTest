[{"/Users/sanghunlee/Desktop/tpaytest/src/index.tsx":"1","/Users/sanghunlee/Desktop/tpaytest/src/reportWebVitals.ts":"2","/Users/sanghunlee/Desktop/tpaytest/src/Main.tsx":"3","/Users/sanghunlee/Desktop/tpaytest/src/components/Confirm.tsx":"4","/Users/sanghunlee/Desktop/tpaytest/src/components/Done.tsx":"5","/Users/sanghunlee/Desktop/tpaytest/src/components/Request.tsx":"6"},{"size":292,"mtime":1609234534089,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1609216415333,"results":"9","hashOfConfig":"8"},{"size":4823,"mtime":1609327717603,"results":"10","hashOfConfig":"8"},{"size":3102,"mtime":1609327718022,"results":"11","hashOfConfig":"8"},{"size":1454,"mtime":1609304520502,"results":"12","hashOfConfig":"8"},{"size":2437,"mtime":1609327688414,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"lmy8oa",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/sanghunlee/Desktop/tpaytest/src/index.tsx",[],[],"/Users/sanghunlee/Desktop/tpaytest/src/reportWebVitals.ts",["32"],"import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/sanghunlee/Desktop/tpaytest/src/Main.tsx",["33","34","35"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"./Main.scss\";\nimport Confirm from \"./components/Confirm\";\nimport Done from \"./components/Done\";\nimport Request from \"./components/Request\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n}\n\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Main() {\n  const [buydata, setBuydata] = useState<[]>([]);\n  const [site, setSite] = useState<[]>([]);\n  const [sitePartition, setSitePartition] = useState<[]>([]);\n  const [error, setError] = useState<[]>([]);\n  const [newBuyData, setNewBuyData] = useState<\n    EnumServiceItems | null | undefined\n  >(null);\n  const [checkBoolean, setCheckBoolean] = useState<string>(\"true\");\n  const [countBool, setCountBool] = useState<number>(0);\n  // const [user, setUser] = useState<UserData | null>(null);\n\n  //getData function\n  function api(url: string, setDataType: string) {\n    return fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then((res) => {\n        if (setDataType === \"buydata\") {\n          setBuydata(res.data);\n          makeItemList(res.data);\n        } else if (setDataType === \"site\") {\n          setSite(res);\n        } else if (setDataType === \"sitePartition\") {\n          setSitePartition(res);\n        } else if (setDataType === \"error\") {\n          setError(res.data);\n        } else {\n          return;\n        }\n      });\n  }\n\n  function makeItemList(itemData: EnumServiceItems | null): void {\n    const newData: EnumServiceItems | null = [];\n    itemData?.map((el) => {\n      for (let i = 0; i < el.quantity; i++) {\n        el.active = \"true\";\n        console.log(\"EL\", el);\n        newData.push(el);\n      }\n    });\n    return setNewBuyData(newData);\n  }\n\n  //checkFucntion\n  function checking(\n    order: number,\n    checkedData: EnumServiceItems | null | undefined\n  ): void {\n    checkedData?.forEach((el, index) => {\n      if (el.active === \"true\" && index === order) {\n        setNewBuyData(\n          checkedData?.map((el, index) =>\n            index === order && el.active === \"true\"\n              ? { ...el, active: \"false\" }\n              : el\n          )\n        );\n        setCountBool(countBool - 1);\n        setCheckBoolean(checkedData?.length <= countBool ? \"false\" : \"true\");\n      } else if (el.active === \"false\" && index === order) {\n        setNewBuyData(\n          checkedData?.map((el, index) =>\n            index === order && el.active === \"false\"\n              ? { ...el, active: \"true\" }\n              : el\n          )\n        );\n        setCountBool(countBool + 1);\n        setCheckBoolean(checkedData?.length <= countBool ? \"false\" : \"true\");\n      }\n    });\n  }\n\n  //checkAll function\n  function checkAll(checkedData: EnumServiceItems | null | undefined): void {\n    setCheckBoolean(checkBoolean === \"true\" ? \"false\" : \"true\");\n\n    setNewBuyData(\n      checkedData?.map((el) =>\n        checkBoolean === \"true\"\n          ? { ...el, active: \"true\" }\n          : { ...el, active: \"false\" }\n      )\n    );\n  }\n\n  useEffect(() => {\n    const buydataUrl =\n      \"https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/data.json\";\n\n    const siteUrl =\n      \"https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/site.json\";\n\n    const sitePartitionUrl =\n      \" https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/sitePartition.json\";\n\n    const errorUrl =\n      \"https://tpay-coding-test.s3.ap-northeast-2.amazonaws.com/error.json\";\n\n    api(buydataUrl, \"buydata\");\n    api(siteUrl, \"site\");\n    api(sitePartitionUrl, \"sitePartition\");\n    api(errorUrl, \"error\");\n  }, []);\n\n  function checkFunction(num: number): void {\n    // console.log(buydata, site, sitePartition, error);\n\n    // buydata.map((data) => {\n    //   type dataType = {\n    //     created: string;\n    //     douzoneCode: string;\n    //     id: number;\n    //     isUsed: boolean;\n    //     modified: string;\n    //     name: string;\n    //     quantity: number;\n    //     totalPrice: number;\n    //     unitPrice: number;\n    //   };\n\n    //   console.log(data[\"totalPrice\" as keyof dataType]);\n    // });\n    console.log(error);\n  }\n\n  return (\n    <div className=\"Main\">\n      {/* 기본정보 */}\n      <Request site={site} sitePartition={sitePartition} />\n      {/* 구매 대상 확인 */}\n      <Confirm\n        buydata={buydata}\n        error={error}\n        newBuyData={newBuyData}\n        checking={checking}\n        checkAll={checkAll}\n        checkBoolean={checkBoolean}\n      />\n      {/* 구매완료 */}\n      <Done />\n    </div>\n  );\n}\n\nexport default Main;\n","/Users/sanghunlee/Desktop/tpaytest/src/components/Confirm.tsx",["36"],"import React from \"react\";\nimport \"../styles/confirm.scss\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n}\n\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Confirm(props: {\n  buydata: [];\n  error: [];\n  newBuyData: EnumServiceItems | null | undefined;\n  checking: (\n    order: number,\n    checkedData: EnumServiceItems | null | undefined\n  ) => void;\n  checkAll: (checkedData: EnumServiceItems | null | undefined) => void;\n  checkBoolean: string;\n}) {\n  return (\n    <div className=\"Confirm\">\n      <section className=\"Confirm\">\n        <div className=\"requestContainer\">\n          <h2>구매 대상 확인</h2>\n          <div className=\"requestCount\">\n            <span> 전체 {props.newBuyData?.length}/</span>\n            <span>대기 {props.newBuyData?.length} /</span>\n            <span>완료 0</span>\n          </div>\n\n          <table>\n            <tr>\n              <th onClick={() => props.checkAll(props.newBuyData)}>\n                <input type=\"checkbox\" />\n                {props.checkBoolean === \"true\" ? (\n                  <div>AllCheck</div>\n                ) : (\n                  <div>NOTCHECK</div>\n                )}\n              </th>\n              <th>품목이름</th>\n              <th>품목코드</th>\n              <th>구매단가(VAT포함)</th>\n              <th>구매입고일</th>\n              <th>상태</th>\n              <th>시리얼</th>\n            </tr>\n            {props?.newBuyData?.map((el: EnumServiceItem, index) => {\n              return (\n                <tr key={index}>\n                  <td onClick={() => props.checking(index, props.newBuyData)}>\n                    <input type=\"checkbox\" />\n                    {el.active === \"false\" ? (\n                      <div>Hello</div>\n                    ) : (\n                      <div>Yellow</div>\n                    )}\n                  </td>\n                  <td>\n                    {el.isUsed ? (\n                      <span className=\"newOne\">[신품]</span>\n                    ) : (\n                      <span className=\"oldOne\">[중고]</span>\n                    )}\n\n                    <span>{el.name}</span>\n                  </td>\n                  <td>\n                    <span>{el.douzoneCode}</span>\n                  </td>\n                  <td>\n                    <span>{el.unitPrice}</span>\n                  </td>\n                  <td>\n                    <span>{el.unitPrice}</span>\n                  </td>\n                  <td className=\"pending\">\n                    <span> 대기</span>\n                  </td>\n                  <td>\n                    <input type=\"text\" value={el.unitPrice} />\n                  </td>\n                </tr>\n              );\n            })}\n          </table>\n        </div>\n      </section>\n      <section className=\"buttonWrapper\">\n        <button type=\"submit\">입고하기</button>\n      </section>\n    </div>\n  );\n}\n\nexport default Confirm;\n","/Users/sanghunlee/Desktop/tpaytest/src/components/Done.tsx",["37","38","39"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nfunction Done() {\n  return (\n    <div className=\"Done\">\n      <section className=\"Confirm\">\n        <div className=\"requestContainer\">\n          <h2>구매완료</h2>\n\n          <table>\n            <th>\n              <input type=\"checkbox\" />\n            </th>\n            <th>품목이름</th>\n            <th>품목코드</th>\n            <th>구매단가(VAT포함)</th>\n            <th>구매입고일</th>\n            <th>상태</th>\n            <th>시리얼</th>\n            <th>이력</th>\n            <tr>\n              <td>\n                <input type=\"checkbox\" />\n              </td>\n              <td>\n                <span>[신품]소형PC스피커(USB전원)</span>\n              </td>\n              <td>\n                <span>ETDV3SPKDO7</span>\n              </td>\n              <td>\n                <span>3,000원</span>\n              </td>\n              <td>\n                <span> 입고일</span>\n              </td>\n              <td>\n                <span> 대기</span>\n              </td>\n              <td>\n                <input type=\"text\" />\n              </td>\n              <td>\n                <button></button>\n              </td>\n            </tr>\n          </table>\n        </div>\n        <div className=\"buttonWrapper\">\n          <button type=\"submit\">되돌리기</button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Done;\n","/Users/sanghunlee/Desktop/tpaytest/src/components/Request.tsx",["40","41","42"],"import React from \"react\";\nimport \"../styles/request.scss\";\nimport { useEffect, useState } from \"react\";\n\nfunction Reqeust(props: { site: []; sitePartition: [] }) {\n  function checkFunction(): void {\n    console.log(props.site);\n  }\n\n  return (\n    <section className=\"Reqeust\">\n      <div className=\"requestContainer\">\n        <h2 onClick={checkFunction}>구매요청</h2>\n        <table>\n          <th>기본정보</th>\n          <tr>\n            <td>\n              <span>*</span>구매요청자\n            </td>\n            <td className=\"inputArea\">\n              <input type=\"text\" />\n            </td>\n            <td>\n              <span>*</span>지사\n            </td>\n            <td className=\"inputArea\">\n              <select name=\"site\">\n                {props.site.map(function (el) {\n                  type dataType = {\n                    id: number;\n                    name: string;\n                  };\n                  return (\n                    <option\n                      key={el[\"id\" as keyof dataType]}\n                      value={el[\"id\" as keyof dataType]}\n                    >\n                      {el[\"name\" as keyof dataType]}\n                    </option>\n                  );\n                })}\n              </select>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <span>*</span>창고\n            </td>\n            <td className=\"inputArea\">\n              <select name=\"sitePartition\">\n                {props.sitePartition.map(function (el) {\n                  type dataType = {\n                    id: number;\n                    name: string;\n                  };\n                  return (\n                    <option\n                      key={el[\"id\" as keyof dataType]}\n                      value={el[\"id\" as keyof dataType]}\n                    >\n                      {el[\"name\" as keyof dataType]}\n                    </option>\n                  );\n                })}\n              </select>\n            </td>\n            <td>\n              <span>*</span>구매희망일\n            </td>\n            <td>\n              <input type=\"text\" />\n            </td>\n          </tr>\n          <tr className=\"memo\">\n            <td>메모</td>\n            <td colSpan=\"3\" align=\"center\" className=\"inputArea\">\n              <textarea></textarea>\n            </td>\n          </tr>\n        </table>\n      </div>\n    </section>\n  );\n}\n\nexport default Reqeust;\n",{"ruleId":"43","severity":1,"message":"44","line":3,"column":25,"nodeType":"45","messageId":"46","endLine":3,"endColumn":57},{"ruleId":"43","severity":1,"message":"44","line":23,"column":1,"nodeType":"47","messageId":"46","endLine":23,"endColumn":16},{"ruleId":"48","severity":1,"message":"49","line":134,"column":12,"nodeType":"50","messageId":"51","endLine":134,"endColumn":25},{"ruleId":"48","severity":1,"message":"52","line":134,"column":26,"nodeType":"50","messageId":"51","endLine":134,"endColumn":37},{"ruleId":"43","severity":1,"message":"44","line":19,"column":1,"nodeType":"47","messageId":"46","endLine":29,"endColumn":3},{"ruleId":"48","severity":1,"message":"53","line":2,"column":10,"nodeType":"50","messageId":"51","endLine":2,"endColumn":19},{"ruleId":"48","severity":1,"message":"54","line":2,"column":21,"nodeType":"50","messageId":"51","endLine":2,"endColumn":29},{"ruleId":"43","severity":1,"message":"44","line":4,"column":1,"nodeType":"47","messageId":"46","endLine":4,"endColumn":16},{"ruleId":"48","severity":1,"message":"53","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":19},{"ruleId":"48","severity":1,"message":"54","line":3,"column":21,"nodeType":"50","messageId":"51","endLine":3,"endColumn":29},{"ruleId":"43","severity":1,"message":"44","line":5,"column":1,"nodeType":"47","messageId":"46","endLine":5,"endColumn":57},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","@typescript-eslint/no-unused-vars","'checkFunction' is defined but never used.","Identifier","unusedVar","'num' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used."]