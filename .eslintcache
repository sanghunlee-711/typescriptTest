[{"/Users/cloudlee/Desktop/development/tpaytest/src/index.tsx":"1","/Users/cloudlee/Desktop/development/tpaytest/src/reportWebVitals.ts":"2","/Users/cloudlee/Desktop/development/tpaytest/src/Main.tsx":"3","/Users/cloudlee/Desktop/development/tpaytest/src/components/Confirm.tsx":"4","/Users/cloudlee/Desktop/development/tpaytest/src/components/Request.tsx":"5","/Users/cloudlee/Desktop/development/tpaytest/src/components/Done.tsx":"6"},{"size":292,"mtime":1609247622631,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1609247622631,"results":"9","hashOfConfig":"8"},{"size":7739,"mtime":1609416088904,"results":"10","hashOfConfig":"8"},{"size":5576,"mtime":1609415914096,"results":"11","hashOfConfig":"8"},{"size":2547,"mtime":1609410161868,"results":"12","hashOfConfig":"8"},{"size":3232,"mtime":1609409450213,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"nf36vw",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/cloudlee/Desktop/development/tpaytest/src/index.tsx",[],[],"/Users/cloudlee/Desktop/development/tpaytest/src/reportWebVitals.ts",["30"],"import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/cloudlee/Desktop/development/tpaytest/src/Main.tsx",["31"],"/Users/cloudlee/Desktop/development/tpaytest/src/components/Confirm.tsx",["32"],"import React from \"react\";\nimport \"../styles/confirm.scss\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n  serial?: number;\n  serialActive?: string;\n  showSerial?: string;\n}\ninterface ErrorType {\n  [index: number]: { serial?: string };\n}\ntype ErrorTypes = Array<ErrorType>;\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Confirm(props: {\n  buydata: [];\n  error: ErrorTypes;\n  newBuyData: EnumServiceItems | null | undefined;\n  receiveData: EnumServiceItems | null | undefined;\n\n  checking: (\n    order: number,\n    checkedData: EnumServiceItems | null | undefined\n  ) => void;\n  checkAll: (checkedData: EnumServiceItems | null | undefined) => void;\n  checkBoolean: string;\n  receiveProduct: (receivedData: EnumServiceItems | null | undefined) => void;\n  happenError: (\n    errorData: ErrorTypes,\n    checkedData: EnumServiceItems | null | undefined\n  ) => void;\n  countBool: number;\n}) {\n  return (\n    <div className=\"Confirm\">\n      <section className=\"Confirm\">\n        <div className=\"requestContainer\">\n          <h2>구매 대상 확인</h2>\n          <div className=\"requestCount\">\n            <span>\n              전체\n              {props.newBuyData?.length === undefined\n                ? 0\n                : props.newBuyData?.length +\n                  (props.receiveData?.length === undefined\n                    ? 0\n                    : props.receiveData?.length)}\n              /\n            </span>\n            <span>대기 {props.newBuyData?.length} /</span>\n            <span>\n              완료\n              {props.receiveData?.length === 0 || undefined\n                ? 0\n                : props.receiveData?.length}\n            </span>\n          </div>\n\n          <table>\n            <tr>\n              <th onClick={() => props.checkAll(props.newBuyData)}>\n                {props.newBuyData != undefined &&\n                props.countBool >= props.newBuyData?.length ? (\n                  <img src=\"https://img.icons8.com/ios/15/000000/checked-checkbox--v1.png\" />\n                ) : (\n                  <img src=\"https://img.icons8.com/ios/15/000000/unchecked-checkbox.png\" />\n                )}\n              </th>\n              <th>품목이름</th>\n              <th>품목코드</th>\n              <th>구매단가(VAT포함)</th>\n              <th>구매입고일</th>\n              <th>상태</th>\n              <th>시리얼</th>\n            </tr>\n\n            {props?.newBuyData?.map((el: EnumServiceItem, index) => {\n              return (\n                <tr\n                  key={index}\n                  className={el.active === \"true\" ? \"marking\" : \"\"}\n                >\n                  <td onClick={() => props.checking(index, props.newBuyData)}>\n                    {el.active === \"false\" ? (\n                      <img src=\"https://img.icons8.com/ios/15/000000/unchecked-checkbox.png\" />\n                    ) : (\n                      <img src=\"https://img.icons8.com/ios/15/000000/checked-checkbox--v1.png\" />\n                    )}\n                  </td>\n                  <td>\n                    {el.isUsed ? (\n                      <span className=\"newOne\">[신품]</span>\n                    ) : (\n                      <span className=\"oldOne\">[중고]</span>\n                    )}\n                    <span>{el.name}</span>\n                  </td>\n                  <td>\n                    <span>{el.douzoneCode}</span>\n                  </td>\n                  <td>\n                    <span>{el.unitPrice}</span>\n                  </td>\n                  <td>\n                    <span className=\"createdDate\">\n                      {el.created.slice(0, el.created.indexOf(\"T\"))}\n                    </span>\n                  </td>\n                  <td className=\"pending\">\n                    <span> 대기</span>\n                  </td>\n                  <td>\n                    <input\n                      disabled\n                      type=\"text\"\n                      value={el.active === \"true\" ? `시리얼${el.serial}` : \"\"}\n                    />\n\n                    {el.serialActive === \"true\" ? (\n                      <span className=\"serialErrorMent\">\n                        시리얼이 중복되었습니다.\n                      </span>\n                    ) : (\n                      <span></span>\n                    )}\n                  </td>\n                </tr>\n              );\n            })}\n          </table>\n          {props?.newBuyData?.length === 0 ? (\n            <div className=\"noData\">\n              <img\n                alt=\"nodata image\"\n                src=\"https://icon-library.com/images/no-data-icon/no-data-icon-10.jpg\"\n              />\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </section>\n      <section className=\"buttonWrapper\">\n        <button\n          className={\n            props.newBuyData?.length === 0 ? \"endButton\" : \"activeButton\"\n          }\n          type=\"submit\"\n          onClick={() => props.receiveProduct(props.newBuyData)}\n        >\n          입고하기\n        </button>\n        <button\n          type=\"submit\"\n          className={\n            props.newBuyData?.length === 0 ? \"endButton\" : \"activeButton\"\n          }\n          onClick={() => props.happenError(props.error, props.buydata)}\n        >\n          오류발생시키기\n        </button>\n      </section>\n    </div>\n  );\n}\n\nexport default Confirm;\n","/Users/cloudlee/Desktop/development/tpaytest/src/components/Request.tsx",[],"/Users/cloudlee/Desktop/development/tpaytest/src/components/Done.tsx",["33"],"import React from \"react\";\nimport \"../styles/done.scss\";\n\ninterface EnumServiceItem {\n  created: string;\n  douzoneCode: string;\n  id: number;\n  isUsed: boolean;\n  modified: string;\n  name: string;\n  quantity: number;\n  totalPrice: number;\n  unitPrice: number;\n  active?: string;\n  serial?: number;\n}\n\ntype EnumServiceItems = Array<EnumServiceItem>;\n\nfunction Done(props: { receiveData: EnumServiceItems | null | undefined }) {\n  return (\n    <div className=\"Done\">\n      <section className=\"Confirm\">\n        <div className=\"requestContainer\">\n          <h2>구매완료</h2>\n\n          <table>\n            <th></th>\n            <th>품목이름</th>\n            <th>품목코드</th>\n            <th>구매단가(VAT포함)</th>\n            <th>구매입고일</th>\n            <th>상태</th>\n            <th>시리얼</th>\n            <th>이력</th>\n\n            {props?.receiveData?.map((el: EnumServiceItem, index) => {\n              return (\n                <tr key={index}>\n                  <td>\n                    {el.active === \"false\" ? (\n                      <img src=\"https://img.icons8.com/ios/15/000000/unchecked-checkbox.png\" />\n                    ) : (\n                      <div>\n                        <img src=\"https://img.icons8.com/ios/15/000000/checked-checkbox--v1.png\" />\n                      </div>\n                    )}\n                  </td>\n                  <td>\n                    {el.isUsed ? (\n                      <span className=\"newOne\">[신품]</span>\n                    ) : (\n                      <span className=\"oldOne\">[중고]</span>\n                    )}\n                    <span>{el.name}</span>\n                  </td>\n                  <td>\n                    <span>{el.douzoneCode}</span>\n                  </td>\n                  <td>\n                    <span>{el.unitPrice}</span>\n                  </td>\n                  <td>\n                    <span className=\"createdDate\">\n                      {el.created.slice(0, el.created.indexOf(\"T\"))}\n                    </span>\n                  </td>\n                  <td className=\"pending\">\n                    <span className=\"green\">완료</span>\n                  </td>\n                  <td>\n                    <input\n                      disabled\n                      className=\"serialBlock\"\n                      type=\"text\"\n                      value={el.active === \"true\" ? `시리얼${el.serial}` : \"\"}\n                    />\n                  </td>\n                  <td>:</td>\n                </tr>\n              );\n            })}\n          </table>\n          {props?.receiveData?.length === 0 ? (\n            <div className=\"noData\">\n              <img\n                alt=\"nodata image\"\n                src=\"https://icon-library.com/images/no-data-icon/no-data-icon-10.jpg\"\n              />\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n        <div className=\"buttonWrapper\">\n          <button\n            type=\"submit\"\n            className={\n              props.receiveData?.length === 0 ? \"endButton\" : \"activeButton\"\n            }\n          >\n            되돌리기\n          </button>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Done;\n",{"ruleId":"34","severity":1,"message":"35","line":3,"column":25,"nodeType":"36","messageId":"37","endLine":3,"endColumn":57},{"ruleId":"34","severity":1,"message":"35","line":30,"column":1,"nodeType":"38","messageId":"37","endLine":30,"endColumn":16},{"ruleId":"34","severity":1,"message":"35","line":25,"column":1,"nodeType":"38","messageId":"37","endLine":43,"endColumn":3},{"ruleId":"34","severity":1,"message":"35","line":20,"column":1,"nodeType":"38","messageId":"37","endLine":20,"endColumn":75},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration"]